package ar.edu.unlu.teocomp1.grupo3;


import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

parser code
{:
    public void syntax_error(Symbol symbol) {
        System.out.println("Error en la lÃ­nea " + (symbol.right + 1) + " columna " + symbol.left + ", " + symbol + " no reconocido, valor " + symbol.value);
    }

    private List<Regla> reglas = new ArrayList<>();

	private int indiceComienzoDeclaracion = 0;
    private List<String> variables = new ArrayList<>();
    private List<String> tipos = new ArrayList<>();

	private void agregarVariable(Object variable) {
        variables.add(variable.toString());
    }

	private void agregarTipo(Object tipo) {
        tipos.add(tipo.toString());
    }

    private void agregarRegla(String numero) {
        reglas.add(new Regla(numero));
    }

	private void actualizarIndice() {
	    indiceComienzoDeclaracion = tipos.size();
	}

	private void ordenarTipos() {
		System.out.println("indiceCom " + indiceComienzoDeclaracion);
	    List<String> listaAOrdenar = tipos.subList(indiceComienzoDeclaracion, tipos.size());
	    Collections.reverse(listaAOrdenar);
	    int j = 0;
	    for (int i = indiceComienzoDeclaracion; i < tipos.size(); i++) {
	    	System.out.println("i " + i);
	        tipos.set(i, listaAOrdenar.get(j++));
	    }
	}

    public List<Regla> getReglas() {
        return reglas;
    }

	public List<String> getVariables() {
        return variables;
    }

	public List<String> getTipos() {
        return tipos;
    }
:}

action code
{:

:}

terminal PR_IF, PR_ELSE, PR_ENDIF, PR_REPEAT, PR_UNTIL, PR_WRITE, PR_MINIMO, PR_MAXIMO, PR_DEFINE, PR_ENDDEFINE, PR_PROGRAM, PR_END, PR_AND, PR_OR, PR_INT, PR_STR, PR_FLOAT, ID, CONST_STRING, CONST_INT, CONST_FLOAT, CONST_BIN, CONST_HEX, ASSIGN, OP_SUM, OP_RESTA, OP_MULT, OP_DIV, OP_DIFF, OP_LT, OP_GT, OP_LE, OP_GE, OP_EQ, LS_ABRIR, LS_CERRAR, BL_ABRIR, BL_CERRAR, PAREN_ABRIR, PAREN_CERRAR, COMA, DOSP, PYC;

non terminal codigo, define, program, programSinVar, programaSinVar, listaDeclaraciones, tipo, declaraciones, declaracion, programa, sentencia, variables, asignacion, seleccion, iteracion, condicion, comparacion, comparador, expresion, termino, factor, constante, lista, elementoLista, callWrite, callMax, callMin;

start with codigo;

codigo ::= define program {: agregarRegla("[Regla 0] - inicio programa con variables"); :};
codigo ::= programSinVar {: agregarRegla("[Regla 0] - inicio programa sin variables"); :};

define ::= PR_DEFINE listaDeclaraciones PR_ENDDEFINE {: agregarRegla("[Regla 1] - Define"); :};
listaDeclaraciones ::= declaraciones {: agregarRegla("[Regla 2] - Declaraciones"); :};
listaDeclaraciones ::= listaDeclaraciones declaraciones {: agregarRegla("[Regla 2] - Nueva declaracion"); :};

tipo ::= PR_INT:entero {: agregarRegla("[Regla 4] - tipo int"); RESULT = entero; :}
    | PR_STR:str {: agregarRegla("[Regla 5] - tipo str"); RESULT = str; :}
    | PR_FLOAT:flotante {: agregarRegla("[Regla 6] - tipo float"); RESULT = flotante; :};

declaraciones ::= OP_LT declaracion OP_GT {: agregarRegla("[Regla 7] - fin declaracion"); ordenarTipos(); actualizarIndice(); :};
declaracion ::= tipo:t OP_GT DOSP OP_LT ID:id {: agregarRegla("[Regla 8] - inicio declaracion"); agregarTipo(t); agregarVariable(id); :};
declaracion ::= tipo:t COMA declaracion COMA ID:id {: agregarRegla("[Regla 9] - nuevo tipo/var"); agregarTipo(t); agregarVariable(id); :};


program ::= PR_PROGRAM programa PR_END {: agregarRegla("[Regla 10] - inicio program"); :};
programa ::= sentencia PYC {: agregarRegla("[Regla 11] - nueva sentencia"); :};
programa ::= programa sentencia PYC {: agregarRegla("[Regla 12] - agregar sentencia"); :};

programSinVar ::= PR_PROGRAM programaSinVar PR_END {: agregarRegla("[Regla 13] - inicio program sin var"); :};
programaSinVar ::= PR_WRITE CONST_STRING PYC {: agregarRegla("[Regla 14] - write string program sin var"); :};
programaSinVar ::= programaSinVar PR_WRITE CONST_STRING PYC {: agregarRegla("[Regla 15] - agregar write program sin var"); :};

sentencia ::= asignacion {: agregarRegla("[Regla 16] - sentencia asignacion"); :}
    | iteracion {: agregarRegla("[Regla 17] - sentencia iteracion"); :}
    | seleccion {: agregarRegla("[Regla 18] - sentencia seleccion"); :}
    | callWrite {: agregarRegla("[Regla 19] - sentencia write"); :};

variables ::= ID ASSIGN {: agregarRegla("[Regla 20] - asignacion a variable"); :}
    | variables ID ASSIGN {: agregarRegla("[Regla 21] - agregar asignacion a variable"); :};

asignacion ::= variables expresion {: agregarRegla("[Regla 22] - asignacion expresion"); :};
asignacion ::= variables CONST_STRING {: agregarRegla("[Regla 23] - asignacion string"); :};

seleccion ::= PR_IF condicion BL_ABRIR programa BL_CERRAR PR_ENDIF {: agregarRegla("[Regla 24] - seleccion IF"); :};
seleccion ::= PR_IF condicion BL_ABRIR programa BL_CERRAR PR_ELSE BL_ABRIR programa BL_CERRAR PR_ENDIF {: agregarRegla("[Regla 25] - seleccion IF ELSE"); :};

iteracion ::= PR_REPEAT BL_ABRIR programa BL_CERRAR PR_UNTIL PAREN_ABRIR condicion PAREN_CERRAR {: agregarRegla("[Regla 26] - iteracion"); :};

condicion ::= comparacion {: agregarRegla("[Regla 27] - condicion comparacion"); :};
condicion ::= comparacion PR_AND comparacion {: agregarRegla("[Regla 28] - AND"); :};
condicion ::= comparacion PR_OR comparacion {: agregarRegla("[Regla 29] - OR"); :};

comparacion ::= expresion comparador expresion {: agregarRegla("[Regla 30] - Comparacion"); :};
comparador ::= OP_GE {: agregarRegla("[Regla 31] - Operador >="); :}
    | OP_LE {: agregarRegla("[Regla 32] - operador <="); :}
	| OP_LT {: agregarRegla("[Regla 33] - operador <"); :}
    | OP_GT {: agregarRegla("[Regla 34] - operador >"); :}
    | OP_EQ {: agregarRegla("[Regla 35] - operador =="); :}
    | OP_DIFF {: agregarRegla("[Regla 36] - operador <>"); :};

expresion ::= expresion OP_SUM termino {: agregarRegla("[Regla 37] - expresión + término"); :};
expresion ::= expresion OP_RESTA termino {: agregarRegla("[Regla 38] - expresión - término"); :};
expresion ::= termino {: agregarRegla("[Regla 39] - nuevo término"); :};
termino ::= termino OP_MULT factor {: agregarRegla("[Regla 40] - termino * factor"); :}
    | termino OP_DIV factor {: agregarRegla("[Regla 41] - termino / factor"); :}
    | factor {: agregarRegla("[Regla 42] - agregar factor"); :};
factor ::= PAREN_ABRIR expresion PAREN_CERRAR | ID | constante {: agregarRegla("[Regla 43] - fin expresion"); :};
factor ::= callMin | callMax {: agregarRegla("[Regla 44] - nuevo factor"); :};

constante ::= CONST_INT {: agregarRegla("[Regla 45] - constante entera"); :}
    | CONST_FLOAT {: agregarRegla("[Regla 46] - constante decimal"); :}
    | CONST_HEX {: agregarRegla("[Regla 47] - constante hexadecimal"); :}
    | CONST_BIN {: agregarRegla("[Regla 48] - constante binaria"); :};

lista ::= LS_ABRIR elementoLista LS_CERRAR {: agregarRegla("[Regla 49] - nueva lista"); :};
elementoLista ::= elementoLista COMA expresion {: agregarRegla("[Regla 50] - nueva expresión lista"); :}
    | expresion {: agregarRegla("[Regla 51] - expresión lista"); :};

callWrite ::= PR_WRITE constante {: agregarRegla("[Regla 52] - llamada write constante"); :}
	| PR_WRITE CONST_STRING {: agregarRegla("[Regla 53] - llamada write str"); :}
	| PR_WRITE ID {: agregarRegla("[Regla 54] - llamada write id"); :};
callMin ::= PR_MINIMO LS_ABRIR LS_CERRAR {: agregarRegla("[Regla 55] - llamada minimo lista vacía"); :};
callMin ::= PR_MINIMO lista {: agregarRegla("[Regla 56] - llamada minimo"); :};
callMax ::= PR_MAXIMO LS_ABRIR LS_CERRAR {: agregarRegla("[Regla 57] - llamada maximo lista vacía"); :};
callMax ::= PR_MAXIMO lista {: agregarRegla("[Regla 58] - llamada maximo"); :};
