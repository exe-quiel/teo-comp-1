
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ar.edu.unlu.teocomp1.grupo3;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\007\003\000\002\007\004" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\011\005\000\002\012\007\000\002\012\007\000\002" +
    "\004\005\000\002\013\004\000\002\013\005\000\002\005" +
    "\005\000\002\006\005\000\002\006\006\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\015\004\000\002\015\005\000\002\016\004\000\002" +
    "\016\004\000\002\017\010\000\002\017\014\000\002\020" +
    "\012\000\002\021\003\000\002\021\005\000\002\021\005" +
    "\000\002\022\005\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\024\005\000\002\024\005\000\002\024" +
    "\003\000\002\025\005\000\002\025\005\000\002\025\003" +
    "\000\002\026\005\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\030" +
    "\005\000\002\031\005\000\002\031\003\000\002\032\004" +
    "\000\002\032\004\000\002\032\004\000\002\034\005\000" +
    "\002\034\004\000\002\033\005\000\002\033\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\006\014\004\016\005\001\002\000\004\041" +
    "\156\001\002\000\004\011\145\001\002\000\004\002\143" +
    "\001\002\000\004\002\uffff\001\002\000\004\016\012\001" +
    "\002\000\004\002\000\001\002\000\012\004\023\007\017" +
    "\011\013\025\022\001\002\000\016\025\140\026\141\027" +
    "\040\030\035\031\027\032\033\001\002\000\014\004\023" +
    "\007\017\011\013\017\137\025\022\001\002\000\004\056" +
    "\136\001\002\000\004\056\uffed\001\002\000\004\050\127" +
    "\001\002\000\004\056\uffef\001\002\000\004\056\uffee\001" +
    "\002\000\004\033\126\001\002\000\022\012\044\013\026" +
    "\025\051\027\040\030\035\031\027\032\033\052\030\001" +
    "\002\000\004\056\uffec\001\002\000\024\012\044\013\026" +
    "\025\041\026\034\027\040\030\035\031\027\032\033\052" +
    "\030\001\002\000\004\046\072\001\002\000\044\020\uffcc" +
    "\021\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\047\uffcc\050\uffcc" +
    "\053\uffcc\054\uffcc\056\uffcc\001\002\000\022\012\044\013" +
    "\026\025\051\027\040\030\035\031\027\032\033\052\030" +
    "\001\002\000\044\020\uffd8\021\uffd8\034\uffd8\035\uffd8\036" +
    "\061\037\062\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8" +
    "\045\uffd8\047\uffd8\050\uffd8\053\uffd8\054\uffd8\056\uffd8\001" +
    "\002\000\044\020\uffd1\021\uffd1\034\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045" +
    "\uffd1\047\uffd1\050\uffd1\053\uffd1\054\uffd1\056\uffd1\001\002" +
    "\000\044\020\uffcd\021\uffcd\034\uffcd\035\uffcd\036\uffcd\037" +
    "\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd" +
    "\047\uffcd\050\uffcd\053\uffcd\054\uffcd\056\uffcd\001\002\000" +
    "\004\056\uffe8\001\002\000\044\020\uffce\021\uffce\034\uffce" +
    "\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043" +
    "\uffce\044\uffce\045\uffce\047\uffce\050\uffce\053\uffce\054\uffce" +
    "\056\uffce\001\002\000\044\020\uffd2\021\uffd2\034\uffd2\035" +
    "\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\044\uffd2\045\uffd2\047\uffd2\050\uffd2\053\uffd2\054\uffd2\056" +
    "\uffd2\001\002\000\010\034\057\035\056\056\uffe9\001\002" +
    "\000\044\020\uffcf\021\uffcf\034\uffcf\035\uffcf\036\uffcf\037" +
    "\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf" +
    "\047\uffcf\050\uffcf\053\uffcf\054\uffcf\056\uffcf\001\002\000" +
    "\016\033\066\034\uffd3\035\uffd3\036\uffd3\037\uffd3\056\uffd3" +
    "\001\002\000\044\020\uffd5\021\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\045\uffd5\047\uffd5\050\uffd5\053\uffd5\054\uffd5\056\uffd5\001" +
    "\002\000\044\020\uffd0\021\uffd0\034\uffd0\035\uffd0\036\uffd0" +
    "\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045" +
    "\uffd0\047\uffd0\050\uffd0\053\uffd0\054\uffd0\056\uffd0\001\002" +
    "\000\004\046\046\001\002\000\044\020\uffc4\021\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4" +
    "\043\uffc4\044\uffc4\045\uffc4\047\uffc4\050\uffc4\053\uffc4\054" +
    "\uffc4\056\uffc4\001\002\000\024\012\044\013\026\025\051" +
    "\027\040\030\035\031\027\032\033\047\047\052\030\001" +
    "\002\000\044\020\uffc5\021\uffc5\034\uffc5\035\uffc5\036\uffc5" +
    "\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045" +
    "\uffc5\047\uffc5\050\uffc5\053\uffc5\054\uffc5\056\uffc5\001\002" +
    "\000\012\034\057\035\056\047\uffc9\054\uffc9\001\002\000" +
    "\044\020\uffd3\021\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\047" +
    "\uffd3\050\uffd3\053\uffd3\054\uffd3\056\uffd3\001\002\000\006" +
    "\047\054\054\053\001\002\000\022\012\044\013\026\025" +
    "\051\027\040\030\035\031\027\032\033\052\030\001\002" +
    "\000\044\020\uffcb\021\uffcb\034\uffcb\035\uffcb\036\uffcb\037" +
    "\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb" +
    "\047\uffcb\050\uffcb\053\uffcb\054\uffcb\056\uffcb\001\002\000" +
    "\012\034\057\035\056\047\uffca\054\uffca\001\002\000\022" +
    "\012\044\013\026\025\051\027\040\030\035\031\027\032" +
    "\033\052\030\001\002\000\022\012\044\013\026\025\051" +
    "\027\040\030\035\031\027\032\033\052\030\001\002\000" +
    "\044\020\uffda\021\uffda\034\uffda\035\uffda\036\061\037\062" +
    "\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\047" +
    "\uffda\050\uffda\053\uffda\054\uffda\056\uffda\001\002\000\022" +
    "\012\044\013\026\025\051\027\040\030\035\031\027\032" +
    "\033\052\030\001\002\000\022\012\044\013\026\025\051" +
    "\027\040\030\035\031\027\032\033\052\030\001\002\000" +
    "\044\020\uffd6\021\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\047" +
    "\uffd6\050\uffd6\053\uffd6\054\uffd6\056\uffd6\001\002\000\044" +
    "\020\uffd7\021\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040" +
    "\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\047\uffd7" +
    "\050\uffd7\053\uffd7\054\uffd7\056\uffd7\001\002\000\044\020" +
    "\uffd9\021\uffd9\034\uffd9\035\uffd9\036\061\037\062\040\uffd9" +
    "\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\047\uffd9\050" +
    "\uffd9\053\uffd9\054\uffd9\056\uffd9\001\002\000\024\012\uffea" +
    "\013\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032" +
    "\uffea\052\uffea\001\002\000\010\034\057\035\056\053\070" +
    "\001\002\000\044\020\uffd4\021\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4" +
    "\045\uffd4\047\uffd4\050\uffd4\053\uffd4\054\uffd4\056\uffd4\001" +
    "\002\000\044\020\uffc2\021\uffc2\034\uffc2\035\uffc2\036\uffc2" +
    "\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045" +
    "\uffc2\047\uffc2\050\uffc2\053\uffc2\054\uffc2\056\uffc2\001\002" +
    "\000\024\012\044\013\026\025\051\027\040\030\035\031" +
    "\027\032\033\047\073\052\030\001\002\000\044\020\uffc3" +
    "\021\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041" +
    "\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\047\uffc3\050\uffc3" +
    "\053\uffc3\054\uffc3\056\uffc3\001\002\000\012\020\122\021" +
    "\123\050\uffe4\053\uffe4\001\002\000\022\034\057\035\056" +
    "\040\117\041\120\042\115\043\114\044\112\045\113\001" +
    "\002\000\004\050\077\001\002\000\012\004\023\007\017" +
    "\011\013\025\022\001\002\000\014\004\023\007\017\011" +
    "\013\025\022\051\102\001\002\000\004\056\111\001\002" +
    "\000\006\005\103\006\104\001\002\000\004\050\105\001" +
    "\002\000\004\056\uffe7\001\002\000\012\004\023\007\017" +
    "\011\013\025\022\001\002\000\014\004\023\007\017\011" +
    "\013\025\022\051\107\001\002\000\004\006\110\001\002" +
    "\000\004\056\uffe6\001\002\000\016\004\ufff3\007\ufff3\011" +
    "\ufff3\017\ufff3\025\ufff3\051\ufff3\001\002\000\022\012\uffe0" +
    "\013\uffe0\025\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\052" +
    "\uffe0\001\002\000\022\012\uffdc\013\uffdc\025\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\052\uffdc\001\002\000\022\012" +
    "\uffdf\013\uffdf\025\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf" +
    "\052\uffdf\001\002\000\022\012\uffdd\013\uffdd\025\uffdd\027" +
    "\uffdd\030\uffdd\031\uffdd\032\uffdd\052\uffdd\001\002\000\022" +
    "\012\044\013\026\025\051\027\040\030\035\031\027\032" +
    "\033\052\030\001\002\000\022\012\uffdb\013\uffdb\025\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\032\uffdb\052\uffdb\001\002\000" +
    "\022\012\uffde\013\uffde\025\uffde\027\uffde\030\uffde\031\uffde" +
    "\032\uffde\052\uffde\001\002\000\016\020\uffe1\021\uffe1\034" +
    "\057\035\056\050\uffe1\053\uffe1\001\002\000\022\012\044" +
    "\013\026\025\051\027\040\030\035\031\027\032\033\052" +
    "\030\001\002\000\022\012\044\013\026\025\051\027\040" +
    "\030\035\031\027\032\033\052\030\001\002\000\006\050" +
    "\uffe2\053\uffe2\001\002\000\006\050\uffe3\053\uffe3\001\002" +
    "\000\024\012\uffeb\013\uffeb\025\uffeb\026\uffeb\027\uffeb\030" +
    "\uffeb\031\uffeb\032\uffeb\052\uffeb\001\002\000\012\004\023" +
    "\007\017\011\013\025\022\001\002\000\014\004\023\007" +
    "\017\011\013\025\022\051\131\001\002\000\004\010\132" +
    "\001\002\000\004\052\133\001\002\000\022\012\044\013" +
    "\026\025\051\027\040\030\035\031\027\032\033\052\030" +
    "\001\002\000\004\053\135\001\002\000\004\056\uffe5\001" +
    "\002\000\016\004\ufff4\007\ufff4\011\ufff4\017\ufff4\025\ufff4" +
    "\051\ufff4\001\002\000\004\002\ufff5\001\002\000\004\056" +
    "\uffc6\001\002\000\004\056\uffc7\001\002\000\004\056\uffc8" +
    "\001\002\000\004\002\001\001\002\000\006\011\150\017" +
    "\151\001\002\000\004\026\146\001\002\000\004\056\147" +
    "\001\002\000\006\011\ufff1\017\ufff1\001\002\000\004\026" +
    "\152\001\002\000\004\002\ufff2\001\002\000\004\056\153" +
    "\001\002\000\006\011\ufff0\017\ufff0\001\002\000\006\015" +
    "\ufffd\041\ufffd\001\002\000\006\015\175\041\156\001\002" +
    "\000\010\022\162\023\157\024\163\001\002\000\006\042" +
    "\ufffa\054\ufffa\001\002\000\006\042\166\054\165\001\002" +
    "\000\004\042\164\001\002\000\006\042\ufffb\054\ufffb\001" +
    "\002\000\006\042\ufff9\054\ufff9\001\002\000\006\015\ufff8" +
    "\041\ufff8\001\002\000\010\022\162\023\157\024\163\001" +
    "\002\000\004\055\167\001\002\000\004\041\170\001\002" +
    "\000\004\025\171\001\002\000\006\042\ufff7\054\ufff7\001" +
    "\002\000\004\054\173\001\002\000\004\025\174\001\002" +
    "\000\006\042\ufff6\054\ufff6\001\002\000\004\016\ufffe\001" +
    "\002\000\006\015\ufffc\041\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\010\002\005\003\007\005\006\001\001\000" +
    "\006\007\154\011\153\001\001\000\004\006\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\010\001" +
    "\001\000\002\001\001\000\020\013\013\014\014\015\024" +
    "\016\017\017\015\020\020\032\023\001\001\000\004\027" +
    "\141\001\001\000\016\014\100\015\024\016\017\017\015" +
    "\020\020\032\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\021\075\022\073\024\074\025" +
    "\030\026\041\027\035\033\042\034\031\001\001\000\002" +
    "\001\001\000\016\024\036\025\030\026\041\027\035\033" +
    "\042\034\031\001\001\000\004\030\070\001\001\000\002" +
    "\001\001\000\016\024\066\025\030\026\041\027\035\033" +
    "\042\034\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\044\001\001\000\002\001\001\000\020\024\047\025\030" +
    "\026\041\027\035\031\051\033\042\034\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\024\054\025\030\026\041\027\035\033" +
    "\042\034\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\025\064\026\041\027\035\033\042\034\031\001" +
    "\001\000\014\025\057\026\041\027\035\033\042\034\031" +
    "\001\001\000\002\001\001\000\012\026\063\027\035\033" +
    "\042\034\031\001\001\000\012\026\062\027\035\033\042" +
    "\034\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\024\047\025\030\026" +
    "\041\027\035\031\051\033\042\034\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\115\001\001\000" +
    "\002\001\001\000\020\013\077\014\014\015\024\016\017" +
    "\017\015\020\020\032\023\001\001\000\016\014\100\015" +
    "\024\016\017\017\015\020\020\032\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\013\105\014\014\015\024\016\017\017\015" +
    "\020\020\032\023\001\001\000\016\014\100\015\024\016" +
    "\017\017\015\020\020\032\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\024\120\025\030\026\041\027\035\033\042\034\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\022\124\024\074\025\030\026\041\027\035\033" +
    "\042\034\031\001\001\000\020\022\123\024\074\025\030" +
    "\026\041\027\035\033\042\034\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\013\127" +
    "\014\014\015\024\016\017\017\015\020\020\032\023\001" +
    "\001\000\016\014\100\015\024\016\017\017\015\020\020" +
    "\032\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\021\133\022\073\024\074\025\030\026\041\027\035" +
    "\033\042\034\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\175" +
    "\001\001\000\006\010\157\012\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\157\012" +
    "\171\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol symbol) {
    	agregarRegla("[ERROR] No se esperaba lexema: " + symbol.value);
    }

    private List<Regla> reglas = new ArrayList<>();

	private int indiceComienzoDeclaracion = 0;
    private List<String> variables = new ArrayList<>();
    private List<String> tipos = new ArrayList<>();

	private void agregarVariable(Object variable) {
        variables.add(variable.toString());
    }

	private void agregarTipo(Object tipo) {
        tipos.add(tipo.toString());
    }

    private void agregarRegla(String numero) {
        reglas.add(new Regla(numero));
    }

	private void actualizarIndice() {
	    indiceComienzoDeclaracion = tipos.size();
	}

	private void ordenarTipos() {
		//System.out.println("indiceCom " + indiceComienzoDeclaracion);
	    List<String> listaAOrdenar = tipos.subList(indiceComienzoDeclaracion, tipos.size());
	    Collections.reverse(listaAOrdenar);
	    int j = 0;
	    for (int i = indiceComienzoDeclaracion; i < tipos.size(); i++) {
	    	//System.out.println("i " + i);
	        tipos.set(i, listaAOrdenar.get(j++));
	    }
	}

    public List<Regla> getReglas() {
        return reglas;
    }

	public List<String> getVariables() {
        return variables;
    }

	public List<String> getTipos() {
        return tipos;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {




  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= codigo EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // codigo ::= define program 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 0] - inicio programa con variables"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigo",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // codigo ::= programSinVar 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 0] - inicio programa sin variables"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigo",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // define ::= PR_DEFINE listaDeclaraciones PR_ENDDEFINE 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 1] - Define"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("define",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // listaDeclaraciones ::= declaraciones 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 2] - Declaraciones"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // listaDeclaraciones ::= listaDeclaraciones declaraciones 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 2] - Nueva declaracion"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tipo ::= PR_INT 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object entero = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 agregarRegla("[Regla 4] - tipo int"); RESULT = entero; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipo ::= PR_STR 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 agregarRegla("[Regla 5] - tipo str"); RESULT = str; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipo ::= PR_FLOAT 
            {
              Object RESULT =null;
		int flotanteleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int flotanteright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object flotante = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 agregarRegla("[Regla 6] - tipo float"); RESULT = flotante; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaraciones ::= OP_LT declaracion OP_GT 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 7] - fin declaracion"); ordenarTipos(); actualizarIndice(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion ::= tipo OP_GT DOSP OP_LT ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 agregarRegla("[Regla 8] - inicio declaracion"); agregarTipo(t); agregarVariable(id); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion ::= tipo COMA declaracion COMA ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 agregarRegla("[Regla 9] - nuevo tipo/var"); agregarTipo(t); agregarVariable(id); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // program ::= PR_PROGRAM programa PR_END 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 10] - inicio program"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // programa ::= sentencia PYC 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 11] - nueva sentencia"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // programa ::= programa sentencia PYC 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 12] - agregar sentencia"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // programSinVar ::= PR_PROGRAM programaSinVar PR_END 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 13] - inicio program sin var"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programSinVar",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // programaSinVar ::= PR_WRITE CONST_STRING PYC 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 14] - write string program sin var"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programaSinVar",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // programaSinVar ::= programaSinVar PR_WRITE CONST_STRING PYC 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 15] - agregar write program sin var"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programaSinVar",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= asignacion 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 16] - sentencia asignacion"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= iteracion 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 17] - sentencia iteracion"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= seleccion 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 18] - sentencia seleccion"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= callWrite 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 19] - sentencia write"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // variables ::= ID ASSIGN 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 20] - asignacion a variable"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variables",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // variables ::= variables ID ASSIGN 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 21] - agregar asignacion a variable"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variables",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // asignacion ::= variables expresion 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 22] - asignacion expresion"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // asignacion ::= variables CONST_STRING 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 23] - asignacion string"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // seleccion ::= PR_IF condicion BL_ABRIR programa BL_CERRAR PR_ENDIF 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 24] - seleccion IF"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seleccion",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // seleccion ::= PR_IF condicion BL_ABRIR programa BL_CERRAR PR_ELSE BL_ABRIR programa BL_CERRAR PR_ENDIF 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 25] - seleccion IF ELSE"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seleccion",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // iteracion ::= PR_REPEAT BL_ABRIR programa BL_CERRAR PR_UNTIL PAREN_ABRIR condicion PAREN_CERRAR 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 26] - iteracion"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iteracion",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // condicion ::= comparacion 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 27] - condicion comparacion"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // condicion ::= comparacion PR_AND comparacion 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 28] - AND"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condicion ::= comparacion PR_OR comparacion 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 29] - OR"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // comparacion ::= expresion comparador expresion 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 30] - Comparacion"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // comparador ::= OP_GE 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 31] - Operador >="); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparador",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comparador ::= OP_LE 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 32] - operador <="); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparador",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comparador ::= OP_LT 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 33] - operador <"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparador",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comparador ::= OP_GT 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 34] - operador >"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparador",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comparador ::= OP_EQ 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 35] - operador =="); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparador",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comparador ::= OP_DIFF 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 36] - operador <>"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparador",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= expresion OP_SUM termino 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 37] - expresion + termino"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= expresion OP_RESTA termino 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 38] - expresion - termino"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= termino 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 39] - nuevo termino"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // termino ::= termino OP_MULT factor 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 40] - termino * factor"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("termino",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // termino ::= termino OP_DIV factor 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 41] - termino / factor"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("termino",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // termino ::= factor 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 42] - agregar factor"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("termino",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // factor ::= PAREN_ABRIR expresion PAREN_CERRAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // factor ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= constante 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 43] - fin expresion"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // factor ::= callMin 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= callMax 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 44] - nuevo factor"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // constante ::= CONST_INT 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 45] - constante entera"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("constante",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // constante ::= CONST_FLOAT 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 46] - constante decimal"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("constante",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // constante ::= CONST_HEX 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 47] - constante hexadecimal"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("constante",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // constante ::= CONST_BIN 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 48] - constante binaria"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("constante",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // lista ::= LS_ABRIR elementoLista LS_CERRAR 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 49] - nueva lista"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // elementoLista ::= elementoLista COMA expresion 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 50] - nueva expresion lista"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementoLista",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // elementoLista ::= expresion 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 51] - expresion lista"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementoLista",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // callWrite ::= PR_WRITE constante 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 52] - llamada write constante"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("callWrite",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // callWrite ::= PR_WRITE CONST_STRING 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 53] - llamada write str"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("callWrite",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // callWrite ::= PR_WRITE ID 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 54] - llamada write id"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("callWrite",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // callMin ::= PR_MINIMO LS_ABRIR LS_CERRAR 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 55] - llamada minimo lista vacia"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("callMin",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // callMin ::= PR_MINIMO lista 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 56] - llamada minimo"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("callMin",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // callMax ::= PR_MAXIMO LS_ABRIR LS_CERRAR 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 57] - llamada maximo lista vacia"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("callMax",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // callMax ::= PR_MAXIMO lista 
            {
              Object RESULT =null;
		 agregarRegla("[Regla 58] - llamada maximo"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("callMax",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
